#!/bin/bash

# ========================================
# LifeBuddy - System Diagnostic Tool
# ========================================
# This script helps diagnose system issues that might be causing
# Cursor crashes and start script problems

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR:${NC} $1"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] INFO:${NC} $1"
}

success() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] SUCCESS:${NC} $1"
}

# Check system resources
check_system_resources() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        System Resource Check${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    # Memory check
    info "Checking memory usage..."
    local available_mem=$(vm_stat 2>/dev/null | grep "Pages free:" | awk '{print $3}' | sed 's/\.//' || echo "0")
    local total_mem=$(vm_stat 2>/dev/null | grep "Pages total:" | awk '{print $3}' | sed 's/\.//' || echo "1")
    
    if [[ "$total_mem" =~ ^[0-9]+$ ]] && [[ "$available_mem" =~ ^[0-9]+$ ]] && [ $total_mem -gt 0 ]; then
        local mem_usage=$(( (total_mem - available_mem) * 100 / total_mem ))
        if [ $mem_usage -gt 95 ]; then
            error "CRITICAL: Memory usage ${mem_usage}% - System may crash"
        elif [ $mem_usage -gt 85 ]; then
            warn "HIGH: Memory usage ${mem_usage}% - Close applications"
        else
            success "Memory usage: ${mem_usage}%"
        fi
    else
        warn "Could not determine memory usage"
    fi
    
    # Disk space check
    info "Checking disk space..."
    local disk_usage=$(df . 2>/dev/null | tail -1 | awk '{print $5}' | sed 's/%//' || echo "0")
    if [[ "$disk_usage" =~ ^[0-9]+$ ]]; then
        if [ $disk_usage -gt 95 ]; then
            error "CRITICAL: Disk usage ${disk_usage}% - System may fail"
        elif [ $disk_usage -gt 90 ]; then
            warn "HIGH: Disk usage ${disk_usage}% - Clean up space"
        else
            success "Disk usage: ${disk_usage}%"
        fi
    else
        warn "Could not determine disk usage"
    fi
    
    # Load average check
    info "Checking system load..."
    local load_avg=$(uptime 2>/dev/null | awk -F'load averages:' '{print $2}' | awk '{print $1}' | sed 's/,//' || echo "0")
    if [[ "$load_avg" =~ ^[0-9]+\.?[0-9]*$ ]]; then
        local load_num=$(echo "$load_avg" | awk '{print int($1)}')
        if [ $load_num -gt 50 ]; then
            error "CRITICAL: System load $load_avg - System overloaded"
        elif [ $load_num -gt 10 ]; then
            warn "HIGH: System load $load_avg - System slow"
        else
            success "System load: $load_avg"
        fi
    else
        warn "Could not determine system load"
    fi
    
    # Process count check
    info "Checking process count..."
    local process_count=$(ps aux 2>/dev/null | wc -l || echo "0")
    local process_limit=$(ulimit -u 2>/dev/null || echo "1000")
    
    if [[ "$process_count" =~ ^[0-9]+$ ]] && [[ "$process_limit" =~ ^[0-9]+$ ]] && [ $process_limit -gt 0 ]; then
        local process_usage=$(( process_count * 100 / process_limit ))
        if [ $process_usage -gt 95 ]; then
            error "CRITICAL: Process count ${process_count}/${process_limit} (${process_usage}%)"
        elif [ $process_usage -gt 80 ]; then
            warn "HIGH: Process count ${process_count}/${process_limit} (${process_usage}%)"
        else
            success "Process count: ${process_count}/${process_limit} (${process_usage}%)"
        fi
    else
        warn "Could not determine process count"
    fi
}

# Check high CPU processes
check_high_cpu_processes() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        High CPU Processes${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    info "Top 10 CPU-consuming processes:"
    ps aux | sort -k3 -nr | head -10 | while read line; do
        local cpu=$(echo "$line" | awk '{print $3}')
        local mem=$(echo "$line" | awk '{print $4}')
        local cmd=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}')
        local pid=$(echo "$line" | awk '{print $2}')
        
        if (( $(echo "$cpu > 50" | bc -l) )); then
            echo -e "${RED}⚠️  ${cpu}% CPU, ${mem}% MEM - PID $pid: $cmd${NC}"
        elif (( $(echo "$cpu > 20" | bc -l) )); then
            echo -e "${YELLOW}⚠️  ${cpu}% CPU, ${mem}% MEM - PID $pid: $cmd${NC}"
        else
            echo -e "${GREEN}✅ ${cpu}% CPU, ${mem}% MEM - PID $pid: $cmd${NC}"
        fi
    done
}

# Check Cursor processes
check_cursor_processes() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        Cursor Process Check${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    local cursor_processes=$(ps aux | grep -i cursor | grep -v grep | wc -l)
    info "Found $cursor_processes Cursor-related processes"
    
    if [ $cursor_processes -gt 0 ]; then
        ps aux | grep -i cursor | grep -v grep | while read line; do
            local cpu=$(echo "$line" | awk '{print $3}')
            local mem=$(echo "$line" | awk '{print $4}')
            local cmd=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}')
            local pid=$(echo "$line" | awk '{print $2}')
            
            if (( $(echo "$cpu > 30" | bc -l) )); then
                echo -e "${RED}⚠️  High CPU: ${cpu}% - PID $pid: $cmd${NC}"
            elif (( $(echo "$mem > 10" | bc -l) )); then
                echo -e "${YELLOW}⚠️  High MEM: ${mem}% - PID $pid: $cmd${NC}"
            else
                echo -e "${GREEN}✅ Normal: ${cpu}% CPU, ${mem}% MEM - PID $pid: $cmd${NC}"
            fi
        done
    else
        success "No Cursor processes found"
    fi
}

# Check Node.js processes
check_node_processes() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        Node.js Process Check${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    local node_processes=$(ps aux | grep -E "node|npm|pnpm" | grep -v grep | wc -l)
    info "Found $node_processes Node.js-related processes"
    
    if [ $node_processes -gt 0 ]; then
        ps aux | grep -E "node|npm|pnpm" | grep -v grep | while read line; do
            local cpu=$(echo "$line" | awk '{print $3}')
            local mem=$(echo "$line" | awk '{print $4}')
            local cmd=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}')
            local pid=$(echo "$line" | awk '{print $2}')
            
            if (( $(echo "$cpu > 20" | bc -l) )); then
                echo -e "${RED}⚠️  High CPU: ${cpu}% - PID $pid: $cmd${NC}"
            elif (( $(echo "$mem > 5" | bc -l) )); then
                echo -e "${YELLOW}⚠️  High MEM: ${mem}% - PID $pid: $cmd${NC}"
            else
                echo -e "${GREEN}✅ Normal: ${cpu}% CPU, ${mem}% MEM - PID $pid: $cmd${NC}"
            fi
        done
    else
        success "No Node.js processes found"
    fi
}

# Check Docker processes
check_docker_processes() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        Docker Process Check${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    local docker_processes=$(ps aux | grep -i docker | grep -v grep | wc -l)
    info "Found $docker_processes Docker-related processes"
    
    if [ $docker_processes -gt 0 ]; then
        ps aux | grep -i docker | grep -v grep | while read line; do
            local cpu=$(echo "$line" | awk '{print $3}')
            local mem=$(echo "$line" | awk '{print $4}')
            local cmd=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}')
            local pid=$(echo "$line" | awk '{print $2}')
            
            if (( $(echo "$cpu > 30" | bc -l) )); then
                echo -e "${RED}⚠️  High CPU: ${cpu}% - PID $pid: $cmd${NC}"
            elif (( $(echo "$mem > 10" | bc -l) )); then
                echo -e "${YELLOW}⚠️  High MEM: ${mem}% - PID $pid: $cmd${NC}"
            else
                echo -e "${GREEN}✅ Normal: ${cpu}% CPU, ${mem}% MEM - PID $pid: $cmd${NC}"
            fi
        done
    else
        success "No Docker processes found"
    fi
}

# Check system services
check_system_services() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        System Services Check${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    # Check for problematic system services
    local problematic_services=("fileproviderd" "OneDrive" "Dropbox" "Google Drive" "iCloud")
    
    for service in "${problematic_services[@]}"; do
        local service_processes=$(ps aux | grep -i "$service" | grep -v grep | wc -l)
        if [ $service_processes -gt 0 ]; then
            local cpu_usage=$(ps aux | grep -i "$service" | grep -v grep | awk '{sum+=$3} END {print sum+0}')
            local mem_usage=$(ps aux | grep -i "$service" | grep -v grep | awk '{sum+=$4} END {print sum+0}')
            
            if (( $(echo "$cpu_usage > 50" | bc -l) )); then
                echo -e "${RED}⚠️  $service: ${cpu_usage}% CPU, ${mem_usage}% MEM - High resource usage${NC}"
            elif (( $(echo "$cpu_usage > 20" | bc -l) )); then
                echo -e "${YELLOW}⚠️  $service: ${cpu_usage}% CPU, ${mem_usage}% MEM - Moderate resource usage${NC}"
            else
                echo -e "${GREEN}✅ $service: ${cpu_usage}% CPU, ${mem_usage}% MEM - Normal${NC}"
            fi
        else
            echo -e "${GREEN}✅ $service: Not running${NC}"
        fi
    done
}

# Check network connectivity
check_network() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        Network Connectivity${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    # Check internet connectivity
    if ping -c 1 8.8.8.8 > /dev/null 2>&1; then
        success "Internet connectivity: OK"
    else
        error "Internet connectivity: FAILED"
    fi
    
    # Check DNS
    if nslookup google.com > /dev/null 2>&1; then
        success "DNS resolution: OK"
    else
        error "DNS resolution: FAILED"
    fi
    
    # Check localhost
    if ping -c 1 localhost > /dev/null 2>&1; then
        success "Localhost connectivity: OK"
    else
        error "Localhost connectivity: FAILED"
    fi
}

# Check file system
check_filesystem() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        File System Check${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    # Check if we're in the right directory
    if [ -f "package.json" ]; then
        success "Project root: Found package.json"
    else
        error "Project root: No package.json found"
    fi
    
    # Check key directories
    local dirs=("backend" "web" "mobile" "logs")
    for dir in "${dirs[@]}"; do
        if [ -d "$dir" ]; then
            success "Directory $dir: Exists"
        else
            warn "Directory $dir: Missing"
        fi
    done
    
    # Check key files
    local files=("start" "stop" "docker-compose.yml" ".env" "env.example")
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            success "File $file: Exists"
        else
            warn "File $file: Missing"
        fi
    done
}

# Generate recommendations
generate_recommendations() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        Recommendations${NC}"
    echo -e "${CYAN}========================================${NC}"
    
    # Check if system is overloaded
    local load_avg=$(uptime 2>/dev/null | awk -F'load averages:' '{print $2}' | awk '{print $1}' | sed 's/,//' || echo "0")
    if [[ "$load_avg" =~ ^[0-9]+\.?[0-9]*$ ]]; then
        local load_num=$(echo "$load_avg" | awk '{print int($1)}')
        if [ $load_num -gt 50 ]; then
            echo -e "${RED}🚨 CRITICAL: System is severely overloaded${NC}"
            echo -e "${YELLOW}   • Restart your computer${NC}"
            echo -e "${YELLOW}   • Close unnecessary applications${NC}"
            echo -e "${YELLOW}   • Use --minimal mode for development${NC}"
        elif [ $load_num -gt 10 ]; then
            echo -e "${YELLOW}⚠️  WARNING: System is under high load${NC}"
            echo -e "${YELLOW}   • Close other applications${NC}"
            echo -e "${YELLOW}   • Consider using --minimal mode${NC}"
        else
            echo -e "${GREEN}✅ System load is normal${NC}"
        fi
    fi
    
    # Check memory
    local available_mem=$(vm_stat 2>/dev/null | grep "Pages free:" | awk '{print $3}' | sed 's/\.//' || echo "0")
    local total_mem=$(vm_stat 2>/dev/null | grep "Pages total:" | awk '{print $3}' | sed 's/\.//' || echo "1")
    if [[ "$total_mem" =~ ^[0-9]+$ ]] && [[ "$available_mem" =~ ^[0-9]+$ ]] && [ $total_mem -gt 0 ]; then
        local mem_usage=$(( (total_mem - available_mem) * 100 / total_mem ))
        if [ $mem_usage -gt 95 ]; then
            echo -e "${RED}🚨 CRITICAL: Memory usage is critical${NC}"
            echo -e "${YELLOW}   • Restart your computer${NC}"
            echo -e "${YELLOW}   • Close memory-intensive applications${NC}"
        elif [ $mem_usage -gt 85 ]; then
            echo -e "${YELLOW}⚠️  WARNING: High memory usage${NC}"
            echo -e "${YELLOW}   • Close unnecessary applications${NC}"
            echo -e "${YELLOW}   • Restart Cursor${NC}"
        fi
    fi
    
    # Check disk space
    local disk_usage=$(df . 2>/dev/null | tail -1 | awk '{print $5}' | sed 's/%//' || echo "0")
    if [[ "$disk_usage" =~ ^[0-9]+$ ]]; then
        if [ $disk_usage -gt 95 ]; then
            echo -e "${RED}🚨 CRITICAL: Disk space is critical${NC}"
            echo -e "${YELLOW}   • Free up disk space immediately${NC}"
            echo -e "${YELLOW}   • Clear caches and temporary files${NC}"
        elif [ $disk_usage -gt 90 ]; then
            echo -e "${YELLOW}⚠️  WARNING: Low disk space${NC}"
            echo -e "${YELLOW}   • Free up some disk space${NC}"
            echo -e "${YELLOW}   • Clear caches${NC}"
        fi
    fi
    
    # General recommendations
    echo -e "${BLUE}💡 General Tips:${NC}"
    echo -e "${BLUE}   • Use --minimal mode if system is slow${NC}"
    echo -e "${BLUE}   • Restart Cursor if it becomes unresponsive${NC}"
    echo -e "${BLUE}   • Close other development tools when not needed${NC}"
    echo -e "${BLUE}   • Consider restarting your computer if issues persist${NC}"
}

# Main function
main() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}    LifeBuddy System Diagnostic${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo
    
    check_system_resources
    echo
    check_high_cpu_processes
    echo
    check_cursor_processes
    echo
    check_node_processes
    echo
    check_docker_processes
    echo
    check_system_services
    echo
    check_network
    echo
    check_filesystem
    echo
    generate_recommendations
    echo
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        Diagnostic Complete${NC}"
    echo -e "${CYAN}========================================${NC}"
}

# Run main function
main "$@" 