#!/bin/bash

# ========================================
# LifeBuddy - Complete Development Environment
# ========================================
# 
# This script starts all LifeBuddy services:
# • Backend API (Express.js) - Port 3001
# • Web App (React + Vite) - Port 5174
# • Mobile Metro (React Native) - Port 8083
# • Database Services (Docker) - MongoDB, Redis
# • iOS Simulator (Xcode) - Optional, see below
#
# Package Manager: pnpm (consistent across all services)
# Usage: ./start [--ios] [--dev|--prod] [--no-simulator]
#   --ios          Launch iOS simulator after Metro starts
#   --dev          Development mode (default) - launches simulator
#   --prod         Production mode - no simulator
#   --no-simulator Skip simulator launch even in dev mode
# Stop:  Ctrl+C
# ========================================

# LifeBuddy - Complete Development Environment Startup Script
# This script starts all services: Backend API, Web App, Mobile Metro, and Database

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
BACKEND_PORT=3001
WEB_PORT=5174
MOBILE_PORT=8083
DB_PORT=27017
REDIS_PORT=6379

# Environment detection
ENVIRONMENT="dev"
LAUNCH_IOS=false
SKIP_SIMULATOR=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --ios)
            LAUNCH_IOS=true
            shift
            ;;
        --dev)
            ENVIRONMENT="dev"
            shift
            ;;
        --prod)
            ENVIRONMENT="prod"
            SKIP_SIMULATOR=true
            shift
            ;;
        --no-simulator)
            SKIP_SIMULATOR=true
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [--ios] [--dev|--prod] [--no-simulator]"
            echo ""
            echo "Options:"
            echo "  --ios          Launch iOS simulator after Metro starts"
            echo "  --dev          Development mode (default) - launches simulator"
            echo "  --prod         Production mode - no simulator"
            echo "  --no-simulator Skip simulator launch even in dev mode"
            echo "  --help, -h     Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Auto-detect iOS launch in dev mode unless explicitly disabled
if [[ "$ENVIRONMENT" == "dev" && "$LAUNCH_IOS" == false && "$SKIP_SIMULATOR" == false ]]; then
    # Check if we're on macOS and have Xcode
    if [[ "$OSTYPE" == "darwin"* ]] && command -v xcodebuild &> /dev/null; then
        LAUNCH_IOS=true
        info "Auto-detected iOS development environment"
    fi
fi

# Project root directory
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$PROJECT_ROOT"

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR:${NC} $1"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] INFO:${NC} $1"
}

success() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] SUCCESS:${NC} $1"
}

# Check if ports are available
check_port() {
    local port=$1
    local service=$2
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        warn "Port $port is already in use by $service"
        return 1
    else
        log "Port $port is available for $service"
        return 0
    fi
}

# Kill processes on specific ports
kill_port() {
    local port=$1
    local service=$2
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        warn "Killing existing process on port $port ($service)"
        lsof -ti:$port | xargs kill -9 2>/dev/null || true
        sleep 2
    fi
}

# Setup environment variables
setup_environment() {
    log "Setting up environment variables for $ENVIRONMENT mode..."
    
    # Check if .env file exists
    if [ ! -f ".env" ]; then
        if [ -f "env.example" ]; then
            info "Creating .env file from env.example..."
            cp env.example .env
            warn "Please update .env file with your actual API keys and configuration"
        else
            warn "No env.example found. Creating basic .env file..."
            cat > .env << EOF
# LifeBuddy Environment Variables
NODE_ENV=$ENVIRONMENT
PORT=3001
MONGODB_URI=mongodb://admin:lifebuddy123@localhost:27017/lifebuddy?authSource=admin
REDIS_URL=redis://localhost:6379
JWT_SECRET=your-super-secret-jwt-key-change-in-production
OPENAI_API_KEY=your-openai-api-key
EOF
        fi
    else
        # Update NODE_ENV in existing .env
        if [[ "$ENVIRONMENT" == "prod" ]]; then
            sed -i.bak 's/NODE_ENV=.*/NODE_ENV=production/' .env
        else
            sed -i.bak 's/NODE_ENV=.*/NODE_ENV=development/' .env
        fi
        info ".env file updated for $ENVIRONMENT mode"
    fi
    
    # Check if backend .env exists
    if [ ! -f "backend/.env" ]; then
        info "Creating backend .env file..."
        cp .env backend/.env 2>/dev/null || cp env.example backend/.env 2>/dev/null || true
    fi
    
    success "Environment variables configured for $ENVIRONMENT mode"
}

# Check dependencies
check_dependencies() {
    log "Checking dependencies..."
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js is not installed. Please install Node.js 18+ from https://nodejs.org/"
        exit 1
    fi
    
    # Check Node.js version
    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        error "Node.js version 18+ is required. Current version: $(node -v)"
        exit 1
    fi
    
    # Check pnpm
    if ! command -v pnpm &> /dev/null; then
        error "pnpm is not installed. Installing pnpm..."
        npm install -g pnpm
    fi
    
    # Check React Native CLI
    if ! command -v npx &> /dev/null; then
        error "npx is not available"
        exit 1
    fi
    
    # Check Xcode (for iOS development)
    if [[ "$LAUNCH_IOS" == true ]]; then
        if ! command -v xcodebuild &> /dev/null; then
            error "Xcode is not installed. Please install Xcode from the App Store"
            exit 1
        fi
        
        # Check iOS Simulator
        if ! xcrun simctl list devices | grep -q "iPhone"; then
            warn "No iOS simulators found. Please open Xcode and install iOS simulators"
        fi
        
        # Check CocoaPods
        if ! command -v pod &> /dev/null; then
            error "CocoaPods is not installed. Please install CocoaPods: sudo gem install cocoapods"
            exit 1
        fi
    fi
    
    success "All dependencies are available"
}

# Install dependencies if needed
install_dependencies() {
    log "Installing dependencies..."
    
    # Root dependencies
    if [ ! -d "node_modules" ]; then
        info "Installing root dependencies..."
        pnpm install
    else
        info "Root dependencies already installed"
    fi
    
    # Backend dependencies
    if [ ! -d "backend/node_modules" ]; then
        info "Installing backend dependencies..."
        cd backend && pnpm install && cd ..
    else
        info "Backend dependencies already installed"
    fi
    
    # Web dependencies
    if [ ! -d "web/node_modules" ]; then
        info "Installing web dependencies..."
        cd web && pnpm install && cd ..
    else
        info "Web dependencies already installed"
    fi
    
    # Mobile dependencies
    if [ ! -d "mobile/node_modules" ]; then
        info "Installing mobile dependencies..."
        cd mobile && pnpm install && cd ..
    else
        info "Mobile dependencies already installed"
    fi
    
    success "Dependencies installed"
}

# Setup iOS development environment
setup_ios() {
    if [[ "$LAUNCH_IOS" != true ]]; then
        return 0
    fi
    
    log "Setting up iOS development environment..."
    
    # Check if iOS project exists
    if [ ! -d "mobile/ios" ]; then
        error "iOS project not found in mobile/ios"
        return 1
    fi
    
    # Check if CocoaPods dependencies are installed
    if [ ! -d "mobile/ios/Pods" ]; then
        info "Installing CocoaPods dependencies..."
        cd mobile/ios
        pod install
        cd ../..
        success "CocoaPods dependencies installed"
    else
        info "CocoaPods dependencies already installed"
    fi
    
    # Check if Xcode workspace exists
    if [ ! -f "mobile/ios/LifeBuddyDev.xcworkspace" ]; then
        error "Xcode workspace not found. Please run 'cd mobile && pnpm run pod-install'"
        return 1
    fi
    
    # Verify iOS scheme exists
    if ! xcodebuild -list -workspace mobile/ios/LifeBuddyDev.xcworkspace | grep -q "LifeBuddyDev"; then
        error "LifeBuddyDev scheme not found in Xcode workspace"
        return 1
    fi
    
    success "iOS development environment ready"
}

# Start Docker services (MongoDB, Redis, etc.)
start_docker_services() {
    log "Starting Docker services..."
    
    if ! command -v docker &> /dev/null; then
        warn "Docker is not installed. Skipping database services."
        warn "Please install Docker Desktop from https://www.docker.com/products/docker-desktop/"
        return 0
    fi
    
    if ! docker info &> /dev/null; then
        warn "Docker daemon is not running. Skipping database services."
        warn "Please start Docker Desktop"
        return 0
    fi
    
    # Ensure backend/pnpm-lock.yaml exists for Docker build
    if [ ! -f "backend/pnpm-lock.yaml" ]; then
        if [ -f "pnpm-lock.yaml" ]; then
            echo "Copying root pnpm-lock.yaml to backend/ for Docker build..."
            cp pnpm-lock.yaml backend/
        else
            echo "Generating backend/pnpm-lock.yaml..."
            cd backend && pnpm install && cd ..
        fi
    fi

    # Check if docker-compose.yml exists
    if [ -f "docker-compose.yml" ]; then
        info "Starting Docker Compose services..."
        docker-compose up -d
        
        # Wait for services to be ready
        log "Waiting for database services to be ready..."
        sleep 10
        
        # Check MongoDB
        if docker-compose ps | grep -q "mongo.*Up"; then
            success "MongoDB is running"
        else
            warn "MongoDB failed to start"
        fi
        
        # Check Redis
        if docker-compose ps | grep -q "redis.*Up"; then
            success "Redis is running"
        else
            warn "Redis failed to start"
        fi
    else
        warn "docker-compose.yml not found. Skipping database services."
    fi
}

# --- Docker Container Setup ---
start_containers() {
    log "Checking and starting required Docker containers (mongodb, redis, elasticsearch, minio, kibana)..."
    local containers=(mongodb redis elasticsearch minio kibana)
    local started_any=0
    for c in "${containers[@]}"; do
        if ! docker ps --format '{{.Names}}' | grep -q "lifebuddy-$c"; then
            info "Starting $c container..."
            docker-compose up -d $c
            started_any=1
        else
            info "$c container already running."
        fi
    done
    if [ $started_any -eq 1 ]; then
        success "All required containers are now running."
    else
        success "All required containers were already running."
    fi
}

# Start backend API
start_backend() {
    log "Starting Backend API on port $BACKEND_PORT..."
    
    kill_port $BACKEND_PORT "Backend API"
    
    cd backend
    pnpm run dev > ../logs/backend.log 2>&1 &
    BACKEND_PID=$!
    cd ..
    
    # Wait for backend to start
    local attempts=0
    while [ $attempts -lt 30 ]; do
        if curl -s http://localhost:$BACKEND_PORT/health > /dev/null 2>&1; then
            success "Backend API is running on http://localhost:$BACKEND_PORT"
            return 0
        fi
        sleep 1
        attempts=$((attempts + 1))
    done
    
    error "Backend API failed to start. Check logs/backend.log for details"
    return 1
}

# Start web app
start_web() {
    log "Starting Web App on port $WEB_PORT..."
    
    kill_port $WEB_PORT "Web App"
    
    cd web
    pnpm run dev > ../logs/web.log 2>&1 &
    WEB_PID=$!
    cd ..
    
    # Wait for web app to start
    local attempts=0
    while [ $attempts -lt 30 ]; do
        if curl -s http://localhost:$WEB_PORT > /dev/null 2>&1; then
            success "Web App is running on http://localhost:$WEB_PORT"
            return 0
        fi
        sleep 1
        attempts=$((attempts + 1))
    done
    
    error "Web App failed to start. Check logs/web.log for details"
    return 1
}

# Start mobile Metro bundler
start_mobile() {
    log "Starting Mobile Metro bundler on port $MOBILE_PORT..."
    
    kill_port $MOBILE_PORT "Mobile Metro"
    
    cd mobile
    pnpm start > ../logs/mobile.log 2>&1 &
    MOBILE_PID=$!
    cd ..
    
    # Wait for Metro to start
    local attempts=0
    while [ $attempts -lt 30 ]; do
        if lsof -Pi :$MOBILE_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
            success "Mobile Metro bundler is running on http://localhost:$MOBILE_PORT"
            return 0
        fi
        sleep 1
        attempts=$((attempts + 1))
    done
    
    error "Mobile Metro bundler failed to start. Check logs/mobile.log for details"
    return 1
}

# Start iOS simulator (optional)
start_ios_simulator() {
    if [[ "$LAUNCH_IOS" != true || "$SKIP_SIMULATOR" == true ]]; then
        if [[ "$ENVIRONMENT" == "prod" ]]; then
            info "Skipping iOS simulator in production mode"
        else
            info "iOS simulator launch disabled"
        fi
        return 0
    fi
    
    log "Launching iOS simulator..."
    
    # Check if iOS project exists
    if [ ! -d "mobile/ios" ]; then
        error "iOS project not found. Run 'cd mobile && pnpm run setup:ios' first."
        return 1
    fi
    
    # Check if CocoaPods dependencies are installed
    if [ ! -d "mobile/ios/Pods" ]; then
        warn "CocoaPods dependencies not installed. Installing now..."
        cd mobile/ios && pod install && cd ../..
    fi
    
    # Wait a bit for Metro to be fully ready
    sleep 5
    
    cd mobile
    pnpm run dev:ios > ../logs/ios.log 2>&1 &
    IOS_PID=$!
    cd ..
    
    success "iOS simulator launch initiated (see logs/ios.log for details)"
    info "iOS simulator may take a moment to start..."
}

# Create logs directory
setup_logs() {
    mkdir -p logs
    log "Logs directory created at logs/"
}

# Display status
show_status() {
    echo
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}        LifeBuddy Status Report${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo -e "${PURPLE}Environment:${NC} $ENVIRONMENT"
    echo -e "${PURPLE}iOS Simulator:${NC} $([ "$LAUNCH_IOS" == true ] && echo "Enabled" || echo "Disabled")"
    echo
    
    # Backend status
    if curl -s http://localhost:$BACKEND_PORT/health > /dev/null 2>&1; then
        echo -e "${GREEN}✅ Backend API${NC} - http://localhost:$BACKEND_PORT"
        echo -e "   Health: http://localhost:$BACKEND_PORT/health"
        echo -e "   API Docs: http://localhost:$BACKEND_PORT/api"
    else
        echo -e "${RED}❌ Backend API${NC} - Not responding"
    fi
    
    # Web app status
    if curl -s http://localhost:$WEB_PORT > /dev/null 2>&1; then
        echo -e "${GREEN}✅ Web App${NC} - http://localhost:$WEB_PORT"
    else
        echo -e "${RED}❌ Web App${NC} - Not responding"
    fi
    
    # Mobile Metro status
    if lsof -Pi :$MOBILE_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "${GREEN}✅ Mobile Metro${NC} - http://localhost:$MOBILE_PORT"
    else
        echo -e "${RED}❌ Mobile Metro${NC} - Not responding"
    fi
    
    # Database status
    if command -v docker &> /dev/null && docker info &> /dev/null; then
        if docker-compose ps | grep -q "mongo.*Up"; then
            echo -e "${GREEN}✅ MongoDB${NC} - Running in Docker"
        else
            echo -e "${YELLOW}⚠️  MongoDB${NC} - Not running"
        fi
        
        if docker-compose ps | grep -q "redis.*Up"; then
            echo -e "${GREEN}✅ Redis${NC} - Running in Docker"
        else
            echo -e "${YELLOW}⚠️  Redis${NC} - Not running"
        fi
    else
        echo -e "${YELLOW}⚠️  Database Services${NC} - Docker not available"
    fi
    
    echo
    echo -e "${CYAN}========================================${NC}"
    echo -e "${PURPLE}📱 Mobile Development Commands:${NC}"
    echo -e "   iOS Simulator: cd mobile && pnpm run dev:ios"
    echo -e "   iOS Device: cd mobile && pnpm run dev:ios:device"
    echo -e "   Android: cd mobile && pnpm run dev:android"
    echo -e "   Metro Reset: cd mobile && pnpm run start:metro"
    echo -e "${PURPLE}🔧 iOS Setup Commands:${NC}"
    echo -e "   Setup iOS: pnpm run setup:mobile:ios"
    echo -e "   Reset iOS: pnpm run reset:mobile:ios"
    echo -e "   Clean iOS: pnpm run clean:mobile:ios"
    echo -e "${PURPLE}📊 Logs:${NC}"
    echo -e "   Backend: tail -f logs/backend.log"
    echo -e "   Web: tail -f logs/web.log"
    echo -e "   Mobile: tail -f logs/mobile.log"
    echo -e "   iOS: tail -f logs/ios.log"
    echo -e "${CYAN}========================================${NC}"
}

# Cleanup function
cleanup() {
    log "Shutting down services..."
    
    # Kill background processes
    if [ ! -z "$BACKEND_PID" ]; then
        kill $BACKEND_PID 2>/dev/null || true
    fi
    
    if [ ! -z "$WEB_PID" ]; then
        kill $WEB_PID 2>/dev/null || true
    fi
    
    if [ ! -z "$MOBILE_PID" ]; then
        kill $MOBILE_PID 2>/dev/null || true
    fi

    if [ ! -z "$IOS_PID" ]; then
        kill $IOS_PID 2>/dev/null || true
    fi
    
    success "All services stopped"
}

# Trap Ctrl+C
trap cleanup INT

# Ensure Docker Desktop is running on macOS before starting services
if [[ "$OSTYPE" == "darwin"* ]]; then
    if ! pgrep -f "Docker Desktop" > /dev/null; then
        echo "Starting Docker Desktop..."
        open -a "Docker"
        # Wait for Docker to be ready
        while ! docker info > /dev/null 2>&1; do
            echo "Waiting for Docker to start..."
            sleep 2
        done
        echo "Docker Desktop is running."
    fi
fi

# Main execution
main() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}    LifeBuddy Development Environment${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo -e "${PURPLE}Environment:${NC} $ENVIRONMENT"
    echo -e "${PURPLE}iOS Simulator:${NC} $([ "$LAUNCH_IOS" == true ] && echo "Enabled" || echo "Disabled")"
    echo
    
    # Setup
    setup_logs
    setup_environment
    check_dependencies
    install_dependencies
    setup_ios
    
    # Start services
    start_containers
    start_docker_services
    start_backend
    start_web
    start_mobile
    
    # Launch iOS simulator if enabled
    start_ios_simulator
    
    # Show status
    show_status
    
    # Keep script running
    log "All services started successfully!"
    log "Press Ctrl+C to stop all services"
    
    # Wait for user to stop
    wait
}

# Run main function
main "$@" 